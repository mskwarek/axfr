# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: ubuntu:latest

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script: 
    - apt update && apt -y install make autoconf cmake lcov build-essential git gcc python lshw llvm-5.0 llvm-5.0-tools clang-5.0
    - git clone -q https://github.com/google/googletest.git googletest
    - cd googletest && git checkout tags/release-1.8.0 && mkdir -p googletest/build && cd googletest/build && cmake .. && make && make install
    - cd ../../googlemock && mkdir build && cd build && cmake .. && make && make install && cd ../../..
  script:
    - mkdir mydns/build
    - cd mydns/build
    - cmake .. -DCOVERAGE=1
    - make -j
    - make -j test
  artifacts:
    paths:
      - mydns/build

test:
  stage: test
  before_script:
    - apt -y install gcc lcov
  dependencies:
    - build
  script:
    - cd mydns/build
    - ./test/runUnitTests
    - mkdir _coverage && cd _coverage
    - find .. -iname "*.gcda" | xargs gcov
    - lcov --capture --directory .. --output-file coverage.info
    - lcov --remove coverage.info '/usr/include/*' '/usr/lib/*' '/usr/local/*' -o coverage_filtered.info
    - genhtml coverage_filtered.info --output-directory ../../../coverage
    - cd ../../..

  artifacts:
    paths:
      - coverage/


pages:
  stage: deploy
  dependencies:
    - test
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master
